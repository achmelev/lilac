public super class {
  version 52_0;
  name ExceptionProber; // org/jasm/test/playground/ExceptionProber
  extends Object; // java/lang/Object
  implements Prober; // org/jasm/test/playground/Prober
   //Constants
  const classref ExceptionProber ExceptionProber_name; // org/jasm/test/playground/ExceptionProber
  const utf8 ExceptionProber_name "org/jasm/test/playground/ExceptionProber";
  const classref Object Object_name; // java/lang/Object
  const utf8 Object_name "java/lang/Object";
  const classref Prober Prober_name; // org/jasm/test/playground/Prober
  const utf8 Prober_name "org/jasm/test/playground/Prober";
  const utf8 init0_name "<init>";
  const utf8 init0_desc "()V";
  const utf8 Code_utf8 "Code";
  const methodref init0 Object, init0_nat; // class=java/lang/Object, name=<init>, descriptor=()V
  const nameandtype init0_nat init0_name, init0_desc; // name=<init> type=()V
  const utf8 LineNumberTable_utf8 "LineNumberTable";
  const utf8 LocalVariableTable_utf8 "LocalVariableTable";
  const utf8 this_name "this";
  const utf8 this_desc "Lorg/jasm/test/playground/ExceptionProber;";
  const utf8 check_name "check";
  const utf8 method_desc "(I)I";
  const methodref doCheck ExceptionProber, doCheck_nat; // class=org/jasm/test/playground/ExceptionProber, name=doCheck, descriptor=(I)I
  const nameandtype doCheck_nat doCheck_name, method_desc; // name=doCheck type=(I)I
  const utf8 doCheck_name "doCheck";
  const classref ProberException ProberException_name; // org/jasm/test/playground/ProberException
  const utf8 ProberException_name "org/jasm/test/playground/ProberException";
  const utf8 a_name "a";
  const utf8 a_desc "I";
  const utf8 e_name "e";
  const utf8 e_desc "Lorg/jasm/test/playground/ProberException;";
  const utf8 StackMapTable_utf8 "StackMapTable";
  const utf8 Exceptions_utf8 "Exceptions";
  const methodref init0$0 ProberException, init0_nat; // class=org/jasm/test/playground/ProberException, name=<init>, descriptor=()V
  const utf8 SourceFile_utf8 "SourceFile";
  const utf8 source_file_name "ExceptionProber.java";
  
  const classref BooleanArray BooleanArray_name;
  const utf8 BooleanArray_name "[Ljava/lang/Boolean;";
  
  source file source_file_name; // ExceptionProber.java
   //Fields
   //Methods
  public method {
    name init0_name; // <init>
    descriptor init0_desc; // ()V
    line numbers {
      line ir0, 3;
    }
    debug vars {
      var this, ir0, this_name, this_desc; // name=this,  descriptor=Lorg/jasm/test/playground/ExceptionProber;
    }
    maxstack 1;
    maxlocals 1;
    //Variables
    var object this;
    //Instructions
    ir0: aload this;
    invokespecial init0; // class=java/lang/Object, name=<init>, descriptor=()V
    return;
  }
  public method {
    name check_name; // check
    descriptor method_desc; // (I)I
    line numbers {
      line ir0, 8;
      line ir6, 9;
      line ir7, 10;
    }
    debug vars {
      var this, ir0, this_name, this_desc; // name=this,  descriptor=Lorg/jasm/test/playground/ExceptionProber;
      var a, ir0, a_name, a_desc; // name=a,  descriptor=I
      var e, ir7, e_name, e_desc; // name=e,  descriptor=Lorg/jasm/test/playground/ProberException;
    }
    stackmap {
      same locals ir6, {object ProberException};
    }
    maxstack 2;
    maxlocals 3;
    try ir0->ir2 catch ProberException go to ir6; // org/jasm/test/playground/ProberException
    //Variables
    var object this;
    var int a;
    var object e;
    //Instructions
    ir0: aload this;
    iload a;
    ir2: invokespecial doCheck; // class=org/jasm/test/playground/ExceptionProber, name=doCheck, descriptor=(I)I
    ireturn;
    ir6: astore e;
    ir7: iconst_5;
    ireturn;
  }
  private method {
    name doCheck_name; // doCheck
    descriptor method_desc; // (I)I
    throws BooleanArray; // org/jasm/test/playground/ProberException
   
    debug vars {
      var this, ir0, this_name, this_desc; // name=this,  descriptor=Lorg/jasm/test/playground/ExceptionProber;
      var a, ir0, a_name, a_desc; // name=a,  descriptor=I
    }
    stackmap {
      same ir13;
    }
    maxstack 2;
    maxlocals 2;
    //Variables
    var object this;
    var int a;
    //Instructions
    ir0: iload a;
    iconst_2;
    if_icmpne ir13;
    /*ir5: new ProberException; // org/jasm/test/playground/ProberException
    dup;
    invokespecial init0$0; // class=org/jasm/test/playground/ProberException, name=<init>, descriptor=()V
    athrow;*/
    ir13: iload a;
    ireturn;
  }
}